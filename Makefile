# Project Metadata
GOVERSION := $(shell go version | awk '{print $$3}')
BUILT_BY  := local
OS        := $(shell uname -s | tr '[:upper:]' '[:lower:]')
ARCH      := $(shell uname -m | sed 's/x86_64/amd64/;s/aarch64/arm64/')
.SILENT:

# Ensure Go tools are in PATH
export PATH := $(HOME)/go/bin:$(PATH)

# Make args forwarding
ARGS := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))
$(eval $(ARGS):;@:)

.PHONY: help fmt test build test-unit test-e2e release-packages build-deb build-apk build-rpm setup-package-repo test-dev test-pipeline

.DEFAULT_GOAL = help

help: ## Display all commands available
	$(eval PADDING=$(shell grep -E '^[a-zA-Z0-9_-]+:.*##.*$$' Makefile | awk '{ print length($$1)-1 }' | sort -n | tail -n 1))
	clear
	echo '╔──────────────────────────────────────────────────╗'
	echo '║ ██╗  ██╗███████╗██╗     ██████╗ ███████╗██████╗  ║'
	echo '║ ██║  ██║██╔════╝██║     ██╔══██╗██╔════╝██╔══██╗ ║'
	echo '║ ███████║█████╗  ██║     ██████╔╝█████╗  ██████╔╝ ║'
	echo '║ ██╔══██║██╔══╝  ██║     ██╔═══╝ ██╔══╝  ██╔══██╗ ║'
	echo '║ ██║  ██║███████╗███████╗██║     ███████╗██║  ██║ ║'
	echo '║ ╚═╝  ╚═╝╚══════╝╚══════╝╚═╝     ╚══════╝╚═╝  ╚═╝ ║'
	echo '╟──────────────────────────────────────────────────╝'
	grep -E '^[a-zA-Z0-9_-]+:.*##.*$$' Makefile | awk 'BEGIN {FS = ":.*##"}; {gsub(/(^ +| +$$)/, "", $$2);printf "╟─[ \033[36m%-$(PADDING)s\033[0m %s\n", $$1, "] "$$2}'
	echo '╚──────────────────────────────────────────────────>'
	echo ''

fmt: ## Format all code: Go, Terraform, YAML, Bazel
	echo "🔧 Formatting Go files..."
	go fmt ./...
	echo "🔧 Formatting Bazel BUILD files..."
	bazel run //:gazelle
	echo "🔧 Formatting Bazel files with buildifier..."
	find . -name "*.bzl" -not -name "build_vars.bzl" -exec buildifier {} \;
	find . -name "BUILD" -o -name "BUILD.bazel" -exec buildifier {} \;
	echo "🔧 Formatting Terraform files..."
	terraform fmt -recursive .
	echo "🔧 Formatting YAML and JSON files..."
	prettier --write "**/*.yml" "**/*.yaml" "**/*.json" "**/*.md"

test: ## Run all tests (unit + e2e - requires Docker for e2e)
	echo "🧪 Running all tests..."
	if echo "$(MAKECMDGOALS)" | grep -q "verbose"; then \
		echo "🔍 Running in verbose mode - showing all test details..."; \
		bazel test //... --config=full-verbose; \
	else \
		bazel test //... --config=full-std; \
	fi
	echo "✅ All tests completed"

test-unit: ## Run unit tests with coverage report generated by Bazel (add 'verbose' for detailed output)
	echo "🧪 Running unit tests with coverage..."
	if echo "$(MAKECMDGOALS)" | grep -q "verbose"; then \
		echo "🔍 Running in verbose mode - showing all test details..."; \
		bazel coverage //... --config=unit-verbose; \
	else \
		bazel coverage //... --config=unit-std; \
	fi
	echo "✅ Coverage report generated: bazel-out/_coverage/_coverage_report.dat (LCOV format)"

build: ## Build cross-platform binaries for all supported platforms
	echo "🚀 Building cross-platform binaries..."
	echo "📦 Creating .dist/bin directory..."
	mkdir -p .dist/bin
	echo "🔧 Building all platforms with Bazel..."
	bazel build //cmd/svz:svz_linux_amd64 //cmd/svz:svz_linux_arm64 //cmd/svz:svz_darwin_amd64 //cmd/svz:svz_darwin_arm64 //cmd/svz:svz_windows_amd64 //cmd/svz:svz_windows_arm64 --config=cross-platform
	echo "📋 Copying binaries to .dist/bin/..."
	cp bazel-bin/cmd/svz/svz_linux_amd64_/svz_linux_amd64 .dist/bin/svz-linux-amd64
	cp bazel-bin/cmd/svz/svz_linux_arm64_/svz_linux_arm64 .dist/bin/svz-linux-arm64
	cp bazel-bin/cmd/svz/svz_darwin_amd64_/svz_darwin_amd64 .dist/bin/svz-darwin-amd64
	cp bazel-bin/cmd/svz/svz_darwin_arm64_/svz_darwin_arm64 .dist/bin/svz-darwin-arm64
	cp bazel-bin/cmd/svz/svz_windows_amd64_/svz_windows_amd64.exe .dist/bin/svz-windows-amd64.exe
	cp bazel-bin/cmd/svz/svz_windows_arm64_/svz_windows_arm64.exe .dist/bin/svz-windows-arm64.exe
	# Create a default 'svz' symlink to Linux AMD64 for convenience
	ln -sf svz-linux-amd64 .dist/bin/svz
	echo "✅ Cross-platform build completed!"
	echo "📁 Binaries available in .dist/bin/:"
	ls -la .dist/bin/

update: ## Update all dependencies (Go modules, Bazel, tools)
	echo "🔄 Updating all dependencies and tools..."
	echo "📦 Updating Go modules..."
	go get -u ./...
	go mod tidy
	echo "🔧 Updating Bazel dependencies..."
	bazel run //:gazelle-update-repos
	echo "🛠️  Updating Go rules for Bazel..."
	bazel run //:gazelle
	echo "🎯 Running tests to verify updates..."
	make test
	echo "✅ All dependencies updated successfully!"

generate-copilot: fmt ## Generate copilot instructions from sectioned files
	echo "🔧 Generating copilot instructions..."
	{ \
		echo '````instructions'; \
		for file in .github/copilot-sections/*.md; do \
			[ -f "$$file" ] || continue; \
			[ "$$file" != ".github/copilot-sections/01-prime-directive.md" ] && printf "\n---\n\n"; \
			if [ "$$(basename "$$file")" = "01-prime-directive.md" ]; then \
				sed '1s/^## /# /' "$$file"; \
			else \
				cat "$$file"; \
			fi; \
		done; \
		echo '````'; \
	} > .github/copilot-instructions.md && echo "✅ Generated .github/copilot-instructions.md"

release-packages: ## Build and prepare packages for repository (requires VERSION env var)
	echo "📦 Building packages for release..."
	@if [ -z "$(VERSION)" ]; then echo "❌ VERSION environment variable required"; exit 1; fi
	mkdir -p .dist/packages/{deb,apk,rpm}
	echo "🔧 Building DEB package..."
	$(MAKE) build-deb VERSION=$(VERSION)
	echo "🔧 Building APK package..."
	$(MAKE) build-apk VERSION=$(VERSION)
	echo "🔧 Building RPM package..."
	$(MAKE) build-rpm VERSION=$(VERSION)
	echo "✅ All packages built successfully!"

build-deb: ## Build Debian/Ubuntu package (requires VERSION env var)
	@if [ -z "$(VERSION)" ]; then echo "❌ VERSION environment variable required"; exit 1; fi
	echo "📦 Creating DEB package structure..."
	mkdir -p .dist/packages/deb/{DEBIAN,usr/bin,usr/share/doc/superviz}
	# Build binary
	CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s -X main.version=$(VERSION)" -o .dist/packages/deb/usr/bin/superviz ./cmd/svz
	chmod +x .dist/packages/deb/usr/bin/superviz
	# Create control file
	echo "Package: superviz" > .dist/packages/deb/DEBIAN/control
	echo "Version: $(VERSION)" >> .dist/packages/deb/DEBIAN/control
	echo "Section: utils" >> .dist/packages/deb/DEBIAN/control
	echo "Priority: optional" >> .dist/packages/deb/DEBIAN/control
	echo "Architecture: amd64" >> .dist/packages/deb/DEBIAN/control
	echo "Maintainer: SuperViz Team <team@superviz.io>" >> .dist/packages/deb/DEBIAN/control
	echo "Description: SuperViz CLI tool for remote system management" >> .dist/packages/deb/DEBIAN/control
	echo " A powerful CLI tool for managing remote systems via SSH," >> .dist/packages/deb/DEBIAN/control
	echo " with support for package installation and system configuration." >> .dist/packages/deb/DEBIAN/control
	echo "Homepage: https://superviz.io" >> .dist/packages/deb/DEBIAN/control
	# Build package
	dpkg-deb --build .dist/packages/deb .dist/packages/superviz_$(VERSION)_amd64.deb
	echo "✅ DEB package created: .dist/packages/superviz_$(VERSION)_amd64.deb"

build-apk: ## Build Alpine package (requires VERSION env var and Docker)
	@if [ -z "$(VERSION)" ]; then echo "❌ VERSION environment variable required"; exit 1; fi
	echo "📦 Creating APK package with Docker..."
	# Build binary first
	CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s -X main.version=$(VERSION)" -o .dist/superviz-$(VERSION) ./cmd/svz
	# Create APK in Docker
	docker run --rm -v $(PWD):/workspace alpine:3.18 sh -c " \
		apk add --no-cache alpine-sdk sudo && \
		adduser -D builder && \
		addgroup builder abuild && \
		sudo -u builder abuild-keygen -a -n && \
		cd /workspace && \
		mkdir -p .dist/packages/apk && \
		cat > .dist/packages/apk/APKBUILD << 'APKEOF' && \
# Maintainer: SuperViz Team <team@superviz.io> \
pkgname=superviz \
pkgver=$(VERSION) \
pkgrel=1 \
pkgdesc=\"SuperViz CLI tool for remote system management\" \
url=\"https://superviz.io\" \
arch=\"x86_64\" \
license=\"MIT\" \
source=\"superviz-$(VERSION)\" \
options=\"!check\" \
\
package() { \
    install -Dm755 \"\$$srcdir/superviz-$(VERSION)\" \"\$$pkgdir/usr/bin/superviz\" \
} \
APKEOF \
		cp .dist/superviz-$(VERSION) .dist/packages/apk/ && \
		cd .dist/packages/apk && \
		sudo -u builder abuild -r && \
		cp /home/builder/packages/*/x86_64/*.apk /workspace/.dist/packages/"
	echo "✅ APK package created in .dist/packages/"

build-rpm: ## Build RPM package (requires VERSION env var and Docker)
	@if [ -z "$(VERSION)" ]; then echo "❌ VERSION environment variable required"; exit 1; fi
	echo "📦 Creating RPM package with Docker..."
	# Build binary first
	CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s -X main.version=$(VERSION)" -o .dist/superviz ./cmd/svz
	# Create RPM in Docker
	docker run --rm -v $(PWD):/workspace fedora:38 sh -c " \
		dnf install -y rpm-build rpmdevtools && \
		cd /workspace && \
		mkdir -p .dist/packages/rpm/{BUILD,RPMS,SOURCES,SPECS,SRPMS} && \
		cp .dist/superviz .dist/packages/rpm/SOURCES/ && \
		cat > .dist/packages/rpm/SPECS/superviz.spec << 'RPMEOF' && \
Name:           superviz \
Version:        $(VERSION) \
Release:        1%{?dist} \
Summary:        SuperViz CLI tool for remote system management \
License:        MIT \
URL:            https://superviz.io \
Source0:        superviz \
\
%description \
A powerful CLI tool for managing remote systems via SSH, \
with support for package installation and system configuration. \
\
%install \
mkdir -p %{buildroot}%{_bindir} \
install -m 755 %{SOURCE0} %{buildroot}%{_bindir}/superviz \
\
%files \
%{_bindir}/superviz \
\
%changelog \
* $$(date +'%a %b %d %Y') SuperViz Team <team@superviz.io> - $(VERSION)-1 \
- Release $(VERSION) \
RPMEOF \
		cd .dist/packages/rpm && \
		rpmbuild --define '_topdir $(PWD)' -bb SPECS/superviz.spec && \
		cp RPMS/x86_64/*.rpm /workspace/.dist/packages/"
	echo "✅ RPM package created in .dist/packages/"

setup-package-repo: ## Set up local package repository for testing
	echo "🏗️ Setting up local package repository structure..."
	mkdir -p .dist/repo/{apt/{dists/stable/main/binary-amd64,pool/main/s/superviz},apk/v3.18/main/x86_64,rpm/x86_64}
	# Copy packages
	find .dist/packages -name "*.deb" -exec cp {} .dist/repo/apt/pool/main/s/superviz/ \; 2>/dev/null || true
	find .dist/packages -name "*.apk" -exec cp {} .dist/repo/apk/v3.18/main/x86_64/ \; 2>/dev/null || true
	find .dist/packages -name "*.rpm" -exec cp {} .dist/repo/rpm/x86_64/ \; 2>/dev/null || true
	echo "📋 Repository structure created in .dist/repo/"
	echo "🌐 Serve with: python3 -m http.server 8080 --directory .dist/repo"
 
test-e2e: ## Run e2e tests (add 'verbose' for detailed output)
	echo "🧪 Running E2E tests..."
	if echo "$(MAKECMDGOALS)" | grep -q "verbose"; then \
		echo "🔍 Running in verbose mode - showing all test details..."; \
		bazel test //... --config=e2e-verbose; \
	else \
		bazel test //... --config=e2e-std; \
	fi
	echo "✅ E2E tests completed"

test-dev: ## Run fast development tests (unit + fast only)
	echo "🏃 Running fast development tests..."
	bazel test //... --config=dev
	echo "✅ Development tests completed"

test-pipeline: ## Run tests for CI/CD pipeline (no cache, all output)
	echo "🚀 Running pipeline tests..."
	bazel test //... --config=pipeline
	echo "✅ Pipeline tests completed"
